---
title: "Text Analysis I - Exercise I"
date: July 11, 2024
format: 
  html:
    embed-resources: true
    number-sections: true
editor: visual
execute: 
  eval: false
  echo: true
  output: false
  warning: false
  error: false
---

# Data preparation

Packages you will (probably) need:

```{r}
library(dplyr)
library(quanteda)
library(quanteda.textstats)
library(quanteda.textplots)
```

Load the data:

```{r}
data_fox <- readRDS("C:/Users/chirikure/Desktop/Rprojects/SICSS_2024/data/FOX.Rds")
data_cnn <- readRDS("C:/Users/chirikure/Desktop/Rprojects/SICSS_2024/data/CNN.Rds")

data_news <- bind_rows(
  list("fox" = data_fox, "cnn" = data_cnn),
  .id = "source"
)
```

Use a smaller sample (if needed):

```{r}
set.seed(161)

data_news <- slice_sample(data_news, n = 300)
```

# Inspect news data with quanteda workflow

## Create corpus, tokens and DFM objects (without pre-processing)

Create corpus object and get summary:

```{r}
corpus <- corpus(data_news, text_field = "body") 

```

Create tokens object:

```{r}
tokens <- tokens(corpus, what = "word")
```

Create Document-Feature-Matrix:

```{r}
dfm <- dfm(tokens)
```

Show most frequent words (without pre-processing)

```{r}
topfeatures(dfm, 10)
textstat_frequency(dfm, n = 10)


```

## Pre-process the text for more useful insights

Remove unnecessary tokens and other text features, homogenize text:

```{r}
tokens_pp <- tokens(
    corpus,
    what = "word",
    remove_punct = TRUE,
    remove_symbols = TRUE,
    remove_numbers = TRUE,
    remove_separators = TRUE
  ) |>
  tokens_tolower() |>
  #tokens_wordstem(language = "en") |>
  tokens_remove(stopwords("en"), padding = FALSE)
```

Inspect pre-processed DFM:

```{r}
dfm <- dfm(tokens_pp)

topfeatures(dfm, 10)
textstat_frequency(dfm, n = 10)

```

## Show most important compound and co-occuring words

Show statistics for top 15 collocations:

```{r}

collocations <- textstat_collocations(tokens_pp, size = 2, min_count = 15)
collocations

#textstat_collocations(tokens_pp) |>
 # head(15)
```

**Bonus**: Create a Feature-Coocurrence-Matrix and plot connection for top 40 words:

```{r}

fcm_pp <- fcm(tokens_pp, context = "window", count = "frequency", window = 3)
# fcm_pp <- fcm(dfm_pp, context = "document", count = "frequency")
dim(fcm_pp)

fcm_pp_subset <- fcm_select(fcm_pp, names(topfeatures(dfm, 40)))

textplot_network(fcm_pp_subset)

```

```{r}
# Step 1: Select the top 40 words based on frequency
top_n <- 40
word_freq <- topfeatures(dfm, n = top_n)

# Step 2: Create the Feature Co-occurrence Matrix
top_words <- names(word_freq)
dfm_top <- dfm_select(dfm, pattern = top_words)

# Convert to a sparse matrix and calculate the co-occurrence
fcm <- t(dfm_top) %*% dfm_top
diag(fcm) <- 0  # Zero out the diagonal (self-co-occurrence)

# Convert the sparse matrix to a data frame for visualization
fcm_df <- as.data.frame(as.matrix(fcm))


```

```{r}
top_n <- 40
word_freq <- topfeatures(dfm, n = top_n)

# Step 2: Create the Feature Co-occurrence Matrix
top_words <- names(word_freq)
fcmat <- fcm(dfm, context = "document", tri = FALSE)

# Select only the top 40 words in the FCM
fcm_top <- fcm_select(fcmat, pattern = top_words)

fcmat
```

## **Bonus**: Visualize differences in keywords by news outlet

Check if keywords differ for different news outlets:

```{r}
textstat_keyness(dfm, target = docvars(corpus, "source") == "cnn") |>
  textplot_keyness()
```
