---
title: "Text Analysis I - Exercise I"
date: July 11, 2024
format: 
  html:
    embed-resources: true
    number-sections: true
editor: visual
execute: 
  eval: false
  echo: true
  output: false
  warning: false
  error: false
---

# Preparation

Packages you will (probably) need:

```{r}
library(dplyr)
library(quanteda)
install.packages("remotes")
remotes::install_github("quanteda/quanteda.sentiment")
library(quanteda.sentiment)
library(seededlda)
library(quanteda.textmodels)
```

Use the script from exercise 1 to get all the necessary objects for the analysis

# Perform a sentiment analysis

Get a dictionary from the quanteda.sentiment package and calculate the polarity (or valence) sentiment for each document:

```{r}
dfm_news

dict_pol <- data_dictionary_HuLiu

dfm_lookup(dfm_news, dict_pol)

textstat_polarity(dfm_news, dict_pol)
# try this by group
dfm_source <- dfm_group(dfm_news, groups = source)

textstat_polarity(dfm_source, dict_pol)

textstat_valence(dfm_news, data_dictionary_AFINN)
```

# Perform a topic models analysis

Use the quantda.texmodel function for a explorative approach or define some seeds if you expect some topics with seeded lda:

```{r}
# code from https://koheiw.github.io/seededlda/articles/pkgdown/seeded.html

library(seededlda)

# dictionary provided by documentation
dict <- dictionary(file = "dictionary.yml") # does not work

# building a dictionary of seed words

dict <- dictionary(list(family = c("family", "couple", "kids"),
                        trump = c("donald", "trump"),
                        biden = c("biden", "joe"),
                        immigration = c("migra*", "border"),
                        crime = c("crime*", "murder", "killer"),
                        economy = c("econom*", "inflat*")))
print(dict)

lda_seed <- textmodel_seededlda(dfm_source, dict, residual = 2, batch_size = 0.01, auto_iter = TRUE,
                                verbose = TRUE)

knitr::kable(terms(lda_seed))
```

# **Bonus**: Train your own naive bayes classifier for sentiment

Get a training set from the labeled data and define classes:

```{r}

```

Train the model with the training data and classes:

```{r}

```

Get (unlabelled) test data:

```{r}

```

Predict class for test data with trained model:

```{r}

```

Create a simple confusion matrix to check prediction accuracy:

```{r}

```
