---
title: "Web Scraping Exercise"
date: July 9, 2024
format: 
  html:
    embed-resources: true
editor: visual
execute: 
  eval: false
  echo: true
  output: false
  warning: false
  error: false
---

## Tasks

0.  Get selector gadget: <https://selectorgadget.com/>
1.  Search for a topic you find interesting using the search function on <https://time.com/>
2.  Select one of the articles from the search results and scrape *title, author, date, and body* of that article.
3.  Scrape the URLs of all five pages of search results
4.  Now scrape title, author, date, and body of all of those articles.

-   *NOTE: The result should be in a data frame with five columns (title, author, date, body, url).*
-   *NOTE: Tomorrow we will learn how to clean the text data.*
-   *NOTE: Don't forget to include a time delay between each request to the server!*

## Packages your will (probably) need:

```{r}
library(tidyverse)
library(rvest)
library(stringi)
```

## Task 1

I searched for "YOUR SEARCH TERM HERE" on https://time.com/.

## Task 2

This task is basically the testing phase for task 4. You go to the webpage, in this case one example article, and find the CSS selectors that work for what you need and note them down.

-   Title: #article-header .self-baseline
-   Authors: .lg:mr-3
-   Date: .lg:inline-block+ .lg:inline-block
-   Text: #article-content-main

```{r}
library(tidyverse)
library(rvest)

#scrape whole page into r
website <- read_html("https://time.com/6995616/france-elections-results-left-coalition-far-right-hung-parliament/")

title <- website %>%
  html_node("#article-header .self-baseline") %>%
  html_text()

author <- website %>%
  html_node("#article-body .font-bold") %>%
  html_text()

body <- website %>%
  html_nodes("#article-content-main") %>%
  html_text() %>%
  paste(collapse = " ")

```

## Task 3

*Hint: Perform a manual search on the webpage, click through the pages, and observe how the URL changes.*

```{r}
# Write scraping function that iterates through page numbers by inserting them into the URL
get_urls <- function(page) {
  website <- read_html(paste0("https://time.com/search/?q=far%20right&page=", page))

  urls <- website %>%
    html_nodes(".media-heading a") %>%
    html_attr("href")

  return(urls)
  
  Sys.sleep(2)
}

# run the function for pages 1-5, and then unlist, which is not necessary, but I prefer to have the result as one string vector.
all_urls <- lapply(1:5, get_urls) %>%
  unlist()
```

## Task 4

We basically combine Task 2 and 3 to solve this one.

```{r}
# Write scraping function
get_all_articles <- function(url) {
  
  print(paste(url, all_urls[[url]]))
  
  website <- read_html(all_urls[[url]])

  article <- tibble(
    title = website %>%
      html_node("#article-header .self-baseline") %>%
      html_text(),
      
    author = website %>%
      html_nodes(".inline-block a.font-bold, #article-body a.font-bold, .entry-byline a") %>%
      html_text() %>%
      paste(collapse = ";"),
    
    date = website %>%
      html_node(".lg\\:inline-block:nth-child(2), time") %>%
      html_text(),
      
    body = website %>%
      html_nodes("#article-content-main") %>%
      html_text() %>%
      paste(collapse = " "),
    
    url = all_urls[[url]]
  )
    
  return(article)   

  Sys.sleep(2)
}

# Execute the function for all URLs previously collected
all_articles <- lapply(seq_along(all_urls), get_all_articles) 

# Transform lists to data frame
time_climate <- bind_rows(all_articles)
write_csv(time_climate, "time_climate.csv")
```
