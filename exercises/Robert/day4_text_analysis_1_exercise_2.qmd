---
title: "Text Analysis I - Exercise I"
date: July 11, 2024
format: 
  html:
    embed-resources: true
    number-sections: true
editor: visual
execute: 
  eval: false
  echo: true
  output: false
  warning: false
  error: false
---

# Preparation

Packages you will (probably) need:

```{r}

remotes::install_github("quanteda/quanteda.sentiment")

library(dplyr)
library(quanteda)
library(quanteda.sentiment)
library(seededlda)
library(quanteda.textmodels)
```

Use the script from exercise 1 to get all the necessary objects for the analysis

# Perform a sentiment analysis

Get a dictionary from the quanteda.sentiment package and calculate the polarity (or valence) sentiment for each document:

```{r}
# Intro Steps: Import Data, Create Tokens and DFM Object
 
data_fox <- readRDS("data/FOX.Rds")
data_cnn <- readRDS("data/CNN.Rds")

data_news <- bind_rows(
  list("fox" = data_fox, "cnn" = data_cnn),
  .id = "source"
)

#set.seed(161)
#data_sample300 <- slice_sample(data_news, n = 300)


corpus <- corpus(data_news, text_field = "body")

tokens_raw <- tokens(corpus)

tokens_pp <- tokens(
  corpus,
  remove_punct = TRUE,
  remove_symbols = TRUE,
  remove_numbers = TRUE,
  remove_separators = TRUE
) |>
  tokens_tolower() |>
  tokens_remove(stopwords("en"), padding = FALSE) |> # show padding
  tokens_wordstem(language = "en")


dfm_pp <- dfm(tokens_pp) |> dfm_trim(min_termfreq = 4)
dfmat_news <- dfm(tokens_pp) %>% 
              dfm_trim(min_termfreq = 0.8, termfreq_type = "quantile",
                       max_docfreq = 0.1, docfreq_type = "prop")

```

```{r}
# Do Sentiment Analysis

dict_pol <- data_dictionary_HuLiu

# dfm_lookup(dfm_pp, dict_pol)

df_polarity <-  textstat_polarity(dfm_pp, dict_pol)
#textstat_valence(dfm_pp, data_dictionary_AFINN)

```

# Perform a topic models analysis

Use the quantda.texmodel function for a explorativ approach or define some seeds if you expect some topics with seeded lda:

```{r}

#tmod_lda <- textmodel_lda(dfmat_news, k = 5)
#terms(tmod_lda, 10)

dict_topic <- load("data/LaverGarry.rda")\s
head(dict_topic)


```

# **Bonus**: Train your own naive bayes classifier for sentiment

Get a training set from the labeled data and define classes:

```{r}

```

Train the model with the training data and classes:

```{r}

```

Get (unlabelled) test data:

```{r}

```

Predict class for test data with trained model:

```{r}

```

Create a simple confusion matrix to check prediction accuracy:

```{r}

```
